# -*- coding: utf-8 -*-
"""Customized Complex Plots.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EMr4qPPgwYNQdSEyOi4sicDIVUUulrBZ
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report
import zipfile
import numpy as np

with zipfile.ZipFile('/content/archive (8).zip', 'r') as zip_ref:
    zip_ref.extractall('.')

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report
from sklearn.preprocessing import LabelEncoder

# Step 1: Load the dataset
df = pd.read_csv('/content/100_Sales.csv')

# Step 2: Inspect the data
print("Dataset Info:")
print(df.info())

# Drop irrelevant columns with all NaN values
df = df.drop(['Unnamed: 9', 'Unnamed: 10'], axis=1)

# Step 3: Process 'Ship_Date' column
df['Ship_Date'] = pd.to_datetime(df['Ship_Date'], format='%d/%m/%Y')
df['Days_Since_Earliest'] = (df['Ship_Date'] - df['Ship_Date'].min()).dt.days
df = df.drop('Ship_Date', axis=1)

# Step 4: Encode categorical variables
# Encode the target variable 'Sales_Channel'
df['Sales_Channel'] = LabelEncoder().fit_transform(df['Sales_Channel'])  # 0 = Offline, 1 = Online

# Encode remaining categorical columns
df = pd.get_dummies(df, columns=['Region', 'Country', 'Item_Type', 'Order_Priority'], drop_first=True)

# Step 5: Define features (X) and target (y)
X = df.drop(['Sales_Channel'], axis=1)  # Feature set
y = df['Sales_Channel']  # Target variable

# Verify the features and target
print("\nFeatures (X) Head:")
print(X.head())
print("\nTarget (y) Head:")
print(y.head())
print("\nFeatures Info:")
print(X.info())

# Step 6: Split the data into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)
print(f"\nTrain set size: {len(X_train)}, Test set size: {len(X_test)}")

# Step 7: Train Decision Tree Classifier
dt_model = DecisionTreeClassifier(random_state=42)
dt_model.fit(X_train, y_train)  # Fit the model
dt_preds = dt_model.predict(X_test)  # Make predictions

# Evaluate Decision Tree
print("\nDecision Tree Evaluation:")
print("Accuracy:", accuracy_score(y_test, dt_preds))
print(classification_report(y_test, dt_preds))

# Step 8: Train Random Forest Classifier
rf_model = RandomForestClassifier(random_state=42, n_estimators=100)
rf_model.fit(X_train, y_train)
rf_preds = rf_model.predict(X_test)

# Evaluate Random Forest
print("\nRandom Forest Evaluation:")
print("Accuracy:", accuracy_score(y_test, rf_preds))
print(classification_report(y_test, rf_preds))